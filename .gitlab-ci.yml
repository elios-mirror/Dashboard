# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/php
image: php:latest

  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  - postgres:latest

variables:
  POSTGRES_DB: homestead
  POSTGRES_USER: root
  POSTGRES_PASSWORD: secret

  # This folder is cached between builds
  # http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
  - vendor/

  # This is a basic example for a gem or script which doesn't use
  # services such as redis or postgres
before_script:
  # Install php extensions
- apt-get update && apt-get install -y libfreetype6-dev libjpeg62-turbo-dev libmcrypt-dev libpng12-dev && docker-php-ext-install -j$(nproc) iconv mcrypt && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ && docker-php-ext-install -j$(nproc) gd

- docker-php-ext-install mbstring pdo_mysql json intl gd xml zip bz2 opcache

- ./composer.phar install
  # Copy over testing configuration.
  # Don't forget to set the database config in .env.testing correctly
  # DB_HOST=mysql
  # DB_DATABASE=project_name
  # DB_USERNAME=root
  # DB_PASSWORD=secret
- cp .env.testing .env

  # Generate an application key. Re-cache.
- php artisan key:generate
- php artisan config:cache

  # Run database migrations.
- php artisan migrate

  # Run database seed
- php artisan db:seed

laravelUnit:
  script:
    # run laravel tests
  - php vendor/bin/phpunit --coverage-text --colors=never

jsTemplateUnit:
  script:
  - echo "done."


deploy:
  stage: deploy
  script:
    - ./deployer.phar deploy
